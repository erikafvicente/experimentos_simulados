[{"name": "app.py", "content": "from shiny import App, render, ui, reactive\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nimport math\n\n# =========================\n# Config\n# =========================\nDT = 1/50.0          # ~50 FPS (estable y suficiente)\nG  = 9.8             # m/s\u00b2\nRHO = 1.225          # kg/m\u00b3\nCD  = 1.2            # arrastre fuerte (disco/plano)\nA_FIX = 0.12         # m\u00b2 (\u00e1rea mayor para notar el efecto)\nK  = 0.5 * RHO * CD * A_FIX   # Fd = K * v^2\nGROUND_EPS = 1e-3    # tolerancia de suelo\nTIME_SCALE = 2   # 1.25\u20132.0 suele ir bien; prueba 1.5 para \u201cun poco\u201d m\u00e1s r\u00e1pido\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h3(\"\ud83c\udf0d Experimento de la Gravedad\"),\n        ui.p(\"\u00a1Lancemos dos objetos y veamos qu\u00e9 ocurre!\"),\n        ui.hr(),\n        ui.input_slider(\"height\", \"Altura (m)\", value=20, min=5, max=50, step=5),\n        ui.input_slider(\"obj1\", \"Masa del 1\u00ba objeto (kg)\", value=1, min=1, max=15, step=1),\n        ui.input_slider(\"obj2\", \"Masa del 2\u00ba objeto (kg)\", value=10, min=1, max=15, step=1),\n        ui.input_action_button(\"drop\", \"\ud83d\udd34 \u00a1D\u00e9jalos caer!\", class_=\"btn-success btn-lg\"),\n        ui.input_action_button(\"reset\", \"\ud83d\udd04 Volver al inicio\", class_=\"btn-warning btn-lg\"),\n        ui.hr(),\n        ui.input_action_button(\"toggle_drag\", \"\ud83c\udf2a\ufe0f Activar/Desactivar aire\", class_=\"btn-secondary\"),\n        ui.output_ui(\"drag_status\"),\n    ),\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"\ud83c\udfac Mira los objetos caer\"),\n            ui.output_plot(\"animation\", height=\"500px\")\n        ),\n        ui.card(\n            ui.card_header(\"\ud83d\udcca Resultados\"),\n            ui.output_ui(\"results\")\n        ),\n        width=1\n    )\n)\n\ndef server(input, output, session):\n    # -----------------------------\n    # Estado de la animaci\u00f3n/f\u00edsica\n    # -----------------------------\n    is_animating = reactive.value(False)\n    animation_complete = reactive.value(False)\n    drag_mode = reactive.value(False)        # False: vac\u00edo | True: con aire\n    step = reactive.value(0)                 # \u201creloj\u201d de frames\n\n    # Estado f\u00edsico (se actualiza en el ticker)\n    y1 = reactive.value(0.0)                 # altura sobre el suelo (m)\n    v1 = reactive.value(0.0)                 # velocidad hacia abajo (m/s)\n    y2 = reactive.value(0.0)\n    v2 = reactive.value(0.0)\n    h0 = reactive.value(20.0)                # altura de inicio (para % progreso)\n\n    # -----------------------------\n    # Utilidades\n    # -----------------------------\n    def reset_state_to_top():\n        # Recoloca ambos objetos arriba con v=0\n        h = float(input.height())\n        h0.set(h)\n        y1.set(h); v1.set(0.0)\n        y2.set(h); v2.set(0.0)\n        step.set(0)\n\n    # -----------------------------\n    # Controles\n    # -----------------------------\n    @reactive.effect\n    @reactive.event(input.drop)\n    def _start():\n        animation_complete.set(False)\n        reset_state_to_top()\n        is_animating.set(True)\n\n    @reactive.effect\n    @reactive.event(input.reset)\n    def _reset():\n        is_animating.set(False)\n        animation_complete.set(False)\n        reset_state_to_top()\n\n    @reactive.effect\n    @reactive.event(input.toggle_drag)\n    def _toggle_drag():\n        # Alterna modo y deja todo preparado arriba\n        drag_mode.set(not drag_mode.get())\n        is_animating.set(False)\n        animation_complete.set(False)\n        reset_state_to_top()\n\n    @render.ui\n    def drag_status():\n        if drag_mode.get():\n            return ui.div(\n                ui.p(\"\ud83c\udf2a\ufe0f Resistencia del aire ACTIVADA (misma resistencia para ambos: el m\u00e1s pesado cae antes)\"),\n                style=\"background-color:#fff3cd;padding:10px;border-radius:6px;\"\n            )\n        else:\n            return ui.div(\n                ui.p(\"\ud83e\uddea Vac\u00edo ideal SIN resistencia (caen igual)\"),\n                style=\"background-color:#d4edda;padding:10px;border-radius:6px;\"\n            )\n\n    # -----------------------------\n    # Ticker: avanza la f\u00edsica y dibuja\n    # -----------------------------\n    @reactive.effect\n    def _ticker():\n        if not is_animating.get():\n            return\n\n        # Programa pr\u00f3ximo frame\n        reactive.invalidate_later(DT)\n\n        # Leer todo SIN crear dependencias reactivas externas\n        with reactive.isolate():\n            effective_dt = DT * TIME_SCALE\n            _drag = drag_mode.get()\n            _y1, _v1 = y1.get(), v1.get()\n            _y2, _v2 = y2.get(), v2.get()\n            _m1 = float(input.obj1())\n            _m2 = float(input.obj2())\n\n        # Si ya est\u00e1n ambos en el suelo, terminar\n        if _y1 <= GROUND_EPS and _y2 <= GROUND_EPS:\n            is_animating.set(False)\n            animation_complete.set(True)\n            return\n\n        # Avance un paso de f\u00edsica\n        if not _drag:\n            if _y1 > GROUND_EPS:\n                _v1 += G * effective_dt\n                _y1 = max(0.0, _y1 - _v1 * effective_dt)\n            if _y2 > GROUND_EPS:\n                _v2 += G * effective_dt\n                _y2 = max(0.0, _y2 - _v2 * effective_dt)\n        else:\n            if _y1 > GROUND_EPS:\n                a1 = G - (K / _m1) * _v1 * abs(_v1)\n                _v1 += a1 * effective_dt\n                _y1 = max(0.0, _y1 - _v1 * effective_dt)\n            if _y2 > GROUND_EPS:\n                a2 = G - (K / _m2) * _v2 * abs(_v2)\n                _v2 += a2 * effective_dt\n                _y2 = max(0.0, _y2 - _v2 * effective_dt)\n\n        # Guardar nuevo estado\n        y1.set(_y1); v1.set(_v1)\n        y2.set(_y2); v2.set(_v2)\n\n        # \u00bfFin?\n        if _y1 <= GROUND_EPS and _y2 <= GROUND_EPS:\n            is_animating.set(False)\n            animation_complete.set(True)\n        else:\n            # Fuerza repintado\n            with reactive.isolate():\n                step.set(step.get() + 1)\n\n    # -----------------------------\n    # Dibujo\n    # -----------------------------\n    @render.plot\n    def animation():\n        # Dependemos de step para repintar por frame\n        _ = step.get()\n\n        fig, ax = plt.subplots(figsize=(10, 8))\n        H = h0.get()\n        _y1, _y2 = y1.get(), y2.get()\n        _m1, _m2 = float(input.obj1()), float(input.obj2())\n\n        # T\u00edtulo\n        if animation_complete.get():\n            title_text = \"\u00a1Animaci\u00f3n terminada!\"\n        else:\n            title_text = \"Vac\u00edo \u2014 caen juntos\" if not drag_mode.get() else \"Con aire \u2014 el pesado va por delante\"\n\n        # Tama\u00f1os visuales (est\u00e9ticos)\n        r1 = _m1*0.12\n        r2 = _m2*0.12\n\n        c1 = Circle((2, _y1), r1, color='#90e0ef', alpha=0.85)\n        ax.add_patch(c1)\n        ax.text(2, _y1, f\"{_m1:.0f} kg\", ha='center', va='center', fontsize=10, fontweight='bold')\n\n        c2 = Circle((5, _y2), r2, color='#ff8fab', alpha=0.85)\n        ax.add_patch(c2)\n        ax.text(5, _y2, f\"{_m2:.0f} kg\", ha='center', va='center', fontsize=10, fontweight='bold')\n\n        # Suelo y marcas\n        ax.axhline(y=0, color='#a68a64', linewidth=8, alpha=0.7)\n        ax.text(3.5, -1.5, 'SUELO', ha='center', fontsize=14, fontweight='bold')\n        for hmark in range(0, int(H) + 10, 10):\n            if hmark <= H:\n                ax.axhline(y=hmark, color='gray', linestyle='--', alpha=0.25)\n                ax.text(0.5, hmark, f'{hmark} m', fontsize=8)\n\n        if is_animating.get() and not drag_mode.get():\n            ax.text(3.5, H - 3, 'Sin aire: caen a la misma velocidad',\n                    ha='center', fontsize=11,\n                    bbox=dict(boxstyle=\"round,pad=0.5\", facecolor='lightblue', alpha=0.8))\n        if is_animating.get() and drag_mode.get():\n            ax.text(3.5, H - 3, 'Con aire: el pesado baja m\u00e1s r\u00e1pido',\n                    ha='center', fontsize=11,\n                    bbox=dict(boxstyle=\"round,pad=0.5\", facecolor='#ffe5e5', alpha=0.9))\n\n        ax.set_xlim(0, 7)\n        ax.set_ylim(-3, H + 5)\n        ax.set_xlabel('Posici\u00f3n')\n        ax.set_ylabel('Altura (m)')\n        ax.set_title(title_text, fontsize=14, fontweight='bold')\n        ax.grid(True, alpha=0.3)\n        ax.set_xticks([])\n        plt.tight_layout()\n        return fig\n\n    # -----------------------------\n    # Resultados\n    # -----------------------------\n    @render.ui\n    def results():\n        H = h0.get()\n        _y1, _y2 = y1.get(), y2.get()\n\n        if not is_animating.get() and not animation_complete.get():\n            return ui.div(\n                ui.h4(\"\ud83d\ude80 \u00a1Listo para empezar!\"),\n                ui.p(\"Pulsa \u201c\u00a1D\u00e9jalos caer!\u201d para ver qu\u00e9 pasa.\")\n            )\n\n        if is_animating.get():\n            # Progreso f\u00edsico: 1 - (altura m\u00e1xima restante / altura inicial)\n            remaining = max(_y1, _y2)\n            progress = 100.0 * (1.0 - remaining / max(H, 1e-9))\n            progress = min(100.0, max(0.0, progress))\n            modo = \"Vac\u00edo\" if not drag_mode.get() else \"Con aire\"\n            return ui.div(\n                ui.h4(f\"\ud83c\udfac {modo}: animaci\u00f3n en curso\u2026\"),\n                ui.p(f\"\ud83d\udcca Progreso: {progress:.0f}%\")\n            )\n\n        # Completado\n        if not drag_mode.get():\n            # Tiempo anal\u00edtico en vac\u00edo (referencial)\n            t_fall = math.sqrt(2 * H / G)\n            v_final = G * t_fall\n            msg = ui.p(f\"\ud83e\uddea Sin aire: tiempo \u2248 {t_fall:.2f} s, v final \u2248 {v_final:.1f} m/s.\")\n        else:\n            msg = ui.p(\"\ud83c\udf2a\ufe0f Con aire: el objeto m\u00e1s pesado llega antes por menor arrastre relativo.\")\n        return ui.div(ui.h4(\"\ud83c\udf89 \u00a1Resultados!\"), msg, ui.p(\"Prueba a cambiar masas y alternar aire/vac\u00edo.\"))\n\napp = App(app_ui, server)", "type": "text"}]